type JSONStruct struct {
	TestBool            bool                 `json:"test_bool"`             // Example: true
	TestInt64           int64                `json:"test_int64"`            // Example: 1234
	TestFloat64         float64              `json:"test_float64"`          // Example: 1234.000
	TestString          string               `json:"test_string"`           // Example: "test"
	TestArrayOfBool     []bool               `json:"test_array_of_bool"`    // Example: [true, false, true]
	TestArrayOfInt64    []int64              `json:"test_array_of_int64"`   // Example: [1, 2, 3, 4]
	TestArrayOfFloat64  []float64            `json:"test_array_of_float64"` // Example: [1.000, 2.000, 3.000, 4.000]
	TestArrayOfString   []string             `json:"test_array_of_string"`  // Example: ["test1", "test2", "test3"]
	TestStruct          *TestStruct          `json:"test_struct"`
	TestArrayOfStruct   []*TestArrayOfStruct `json:"test_array_of_struct"`
	TestGarbageArray    []*json.RawMessage   `json:"test_garbage_array"`
	TerribleNameForAKey string               `json:"terrible-name.for_a.key"` // Example: "test"
}

type TestStruct struct {
	TestString        string   `json:"test_string"`          // Example: "test"
	TestArrayOfString []string `json:"test_array_of_string"` // Example: ["test1", "test2", "test3"]
}

type TestArrayOfStruct struct {
	TestString         string `json:"test_string"`                    // Example: "test1"
	TestOptionalString string `json:"test_optional_string,omitempty"` // Example: "test1"
}
